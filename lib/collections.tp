import lang;

require {
    exit
}

abstract class Iterator<T> {
    abstract fn hasNext() boolean;

    abstract fn next() *T;
}

abstract class Iterable<T> {
    abstract fn iter() *Iterator<T>;
}

abstract class Collection<T>(Iterable<T>) {
    abstract fn size() int;
}

abstract class AbsList<T>(Collection<T>) {
    abstract fn append(value: *T) void;

    abstract fn get(index: int) *T;

    abstract fn set(index: int, value: *T) void;

    abstract fn remove(index: int) *T;

    fn toArray() T[] {
        length := this.size();
        array := new T[this.size()];
        for i := 0; i < length; ++i {
            array[i] = this.get(i);
        }
        return array;
    }

    protected fn checkIndex(index: int) void {
        if index < 0 or index >= this.size() {
            println("Index out of bound.");
            exit(1);
        }
    }

    fn __get__(index: int) *T {
        return this.get(index);
    }

    fn __set__(index: int, value: *T) void {
        this.set(index, value);
    }
}

class ListIterator<T>(Iterator<T>) {
    private lst: *List<T>;
    index: int = 0;

    fn __new__(lst: *List<T>) void {
        this.lst = lst;
    }

    fn hasNext() boolean {
        return this.index < this.lst.size();
    }

    fn next() *T {
        return this.lst.get(this.index++);
    }
}

class List<T>(AbsList<T>) {
    protected array: T[];
    protected size: int = 0;

    fn __new__() void {
        super.__new__();

        this.array = new T[8];
    }

    fn iter() *ListIterator<T> {
        return new ListIterator<T>(this);
    }

    @Override
    fn size() int {
        return this.size;
    }

    @Override
    fn append(value: *T) void {
        this.array[this.size++] = value;

        this.checkSize();
    }

    @Override
    fn get(index: int) *T {
        this.checkIndex(index);

        return this.array[index];
    }

    @Override
    fn set(index: int, value: *T) void {
        this.checkIndex(index);

        this.array[index] = value;
    }

    @Override
    fn remove(index: int) *T {
        obj: *T = this.get(index);

        for i := index + 1; i < this.size; ++i {
            this.array[i - 1] = this.array[i];
        }
        this.size--;
        this.checkSize();
        return obj;
    }

    @Override
    fn toString() *String {
        strArr := new String[this.size];
        for i := 0; i < this.size; i++ {
            strArr[i] = this.get(i).toString();
        }
        joint := ", ".join(strArr);
        return "[".concat(joint).concat("]");
    }

    protected fn checkSize() void {
        if this.size == this.array.length {
            this.expand();
        }
        if this.size < this.array.length / 4 {
            this.collapse();
        }
    }

    private fn expand() void {
        arr := new T[this.array.length * 2];
        arraycopy(this.array, 0, arr, 0, this.size);
        del this.array;
        this.array = arr;
    }

    private fn collapse() void {
        arr := new T[this.array.length / 2];
        arraycopy(this.array, 0, arr, 0, this.size);
        del this.array;
        this.array = arr;
    }
}

class LinkedIterator<T>(Iterator<T>) {
    node: *LinkedNode;

    fn __new__(head: *LinkedNode<T>) void {
        this.node = head;
    }

    fn hasNext() boolean {
        return this.node != NULL;
    }

    fn next() *T {
        value: *T = this.node.value;
        this.node = this.node.next;
        return value;
    }
}

class LinkedNode<T> {
    value: *T;
    next: *LinkedNode<T>;
    prev: *LinkedNode<T>;
}

class LinkedList<T>(AbsList<T>) {
    head: *LinkedNode<T> = NULL;
    tail: *LinkedNode<T> = NULL;
    size: int = 0;

    fn iter() *LinkedIterator<T> {
        return NULL;
    }

    fn append(value: *T) void {

    }

    fn get(index: int) *T {
        this.checkIndex(index);
        return NULL;
    }

    fn set(index: int, value: *T) void {

    }

    fn remove(index: int) *T {
        this.checkIndex(index);
        return NULL;
    }

    fn size() int {
        return this.size;
    }
}

abstract class Map<K, V>(Iterable<K>) {

}

class HashMap<K, V>(Map<K, V>) {
    fn iter() *Iterator<K> {
        return NULL;
    }
}

export {
    Iterator, ListIterator,
    AbsList, List,
    Map, HashMap,
}
