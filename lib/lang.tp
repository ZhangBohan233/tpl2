/*
Builtin library for most object oriented features of tpl.
*/

/*
Macro constants
*/
macro boolean {int}
const FALSE: int = 0;
const TRUE: int = 1;
const NULL: *void = 0 as *void;

class Object {
    fn __new__() void {
    }

    fn hash() int {
        return this.class * ((this as *void) as int);
    }

    fn equals(other: *Object) boolean {
        return this is other;
    }

    fn notEquals(other: *Object) boolean {
        return not this.equals(other);
    }

    fn toString() *String {
        return "Object@" + intToString((this as *void) as int);
    }
}

class String {
    private const chars: char[];

    fn __new__(chars: char[]) void {
        super.__new__();

        this.chars = new char[chars.length];
        arraycopy(chars, 0, this.chars, 0, chars.length);
    }

    fn __new__(other: *String) void {
        this.__new__(other.chars);
    }

    fn __add__(other: *String) *String {
        return this.concat(other);
    }

    fn __add__(other: char) *String {
        return this.concat(other);
    }

    fn __add__(other: *Object) *String {
        return this.__add__(other.toString());
    }

    fn __mul__(n: int) *String {
        return this.repeat(n);
    }

    @Override
    fn toString() *String {
        return this;
    }

    fn concat(other: *String) *String {
        newChars: char[] = new char[this.length() + other.length()];
        arraycopy(this.chars, 0, newChars, 0, this.length());
        arraycopy(other.chars, 0, newChars, this.length(), other.length());
        return new String(newChars);
    }

    fn concat(other: char) *String {
        newChars: char[] = new char[this.length() + 1];
        arraycopy(this.chars, 0, newChars, 0, this.length());
        newChars[newChars.length - 1] = other;
        return new String(newChars);
    }

    fn equals(other: *Object) boolean {
        if not (other instanceof String) {
            return FALSE;
        }
        os := other as *String;
        if this.length() != os.length() {
            return FALSE;
        }
        for i := 0; i < this.chars.length; ++i {
            if this.chars[i] != os.chars[i] {
                return FALSE;
            }
        }
        return TRUE;
    }

    const inline fn length() int {
        return this.chars.length;
    }

    /*
    This string as the deliminator.
    */
    fn join(array: String[]) *String {
        totalLength := 0;
        thisLength := this.length();
        for i := 0; i < array.length; ++i {
            totalLength += array[i].length();
        }
        if totalLength > 0 {
            totalLength += thisLength * (array.length - 1);
        }
        totalArray := new char[totalLength];
        index := 0;
        for i := 0; i < array.length; ++i {
            chars := array[i].chars;
            arraycopy(chars, 0, totalArray, index, chars.length);
            index += chars.length;
            if index < totalLength {
                arraycopy(this.chars, 0, totalArray, index, thisLength);
                index += thisLength;
            }
        }
        return new String(totalArray);
    }

    fn print() void {
        _print_str(this.chars);
    }

    fn println() void {
        _println_str(this.chars);
    }

    fn repeat(n: int) *String {
        if n < 0 {
            println("Negative repeat times.");
            _exit(1);
        }
        resLen := this.length() * n;
        resArr := new char[resLen];
        for i := 0; i < n; ++i {
            index := i * this.length();
            arraycopy(this.chars, 0, resArr, index, this.length());
        }
        return new String(resArr);
    }
}

abstract class Number {
    fn __new__() void {
        super.__new__();
    }

    abstract fn intValue() int;

    abstract fn floatValue() float;

    abstract fn charValue() char;

    abstract fn byteValue() byte;

    fn __add__(other: *IntLike) *Integer {
        return new Integer(this.intValue() + other.intValue());
    }

    fn __add__(other: *Float) *Float {
        return new Float(this.floatValue() + other.floatValue());
    }

    fn __sub__(other: *IntLike) *Number {
        return new Integer(this.intValue() - other.intValue());
    }

    fn __sub__(other: *Float) *Float {
        return new Float(this.floatValue() - other.floatValue());
    }

    fn __mul__(other: *IntLike) *Number {
        return new Integer(this.intValue() * other.intValue());
    }

    fn __mul__(other: *Float) *Float {
        return new Float(this.floatValue() * other.floatValue());
    }

    fn __div__(other: *IntLike) *Number {
        return new Integer(this.intValue() / other.intValue());
    }

    fn __div__(other: *Float) *Float {
        return new Float(this.floatValue() / other.floatValue());
    }

    fn __mod__(other: *IntLike) *Number {
        return new Integer(this.intValue() % other.intValue());
    }

    fn __mod__(other: *Float) *Float {
        return new Float(this.floatValue() % other.floatValue());
    }

    fn __lt__(other: *IntLike) int {
        return this.intValue() < other.intValue();
    }

    fn __lt__(other: *Float) int {
        return this.floatValue() < other.floatValue();
    }

    fn __gt__(other: *IntLike) int {
        return this.intValue() > other.intValue();
    }

    fn __gt__(other: *Float) int {
        return this.floatValue() > other.floatValue();
    }
}

/**
 * Numbers that can be transformed to Integer losslessly.
 */
abstract class IntLike(Number) {
    @Override
    fn floatValue() float {
        return this.intValue() as float;
    }
}

class Integer(IntLike) {
    private const value: int;

    fn __new__(value: int) void {
        super.__new__();

        this.value = value;
    }

    @Override
    fn intValue() int {
        return this.value;
    }

    @Override
    fn charValue() char {
        return this.value as char;
    }

    @Override
    fn byteValue() byte {
        return this.value as byte;
    }

    @Override
    fn toString() *String {
        return intToString(this.value);
    }
}

class Float(Number) {
    private const value: float;

    fn __new__(value: float) void {
        super.__new__();

        this.value = value;
    }

    @Override
    fn intValue() int {
        return this.value as int;
    }

    @Override
    fn floatValue() float {
        return this.value;
    }

    @Override
    fn charValue() char {
        return this.value as int as char;
    }

    @Override
    fn byteValue() byte {
        return this.value as int as byte;
    }

    @Override
    fn toString() *String {
        return floatToString(this.value);
    }
}

class Char(IntLike) {
    private const value: char;

    fn __new__(value: char) void {
        super.__new__();

        this.value = value;
    }

    @Override
    fn intValue() int {
        return this.value as int;
    }

    @Override
    fn charValue() char {
        return this.value;
    }

    @Override
    fn byteValue() byte {
        return this.value as int as byte;
    }

    @Override
    fn toString() *String {
        array := new char[1];
        array[0] = this.value;
        return new String(array);
    }
}

class Byte(IntLike) {
    private const value: byte;

    fn __new__(value: byte) void {
        super.__new__();

        this.value = value;
    }

    @Override
    fn intValue() int {
        return this.value as int;
    }

    @Override
    fn charValue() char {
        return this.value as int as char;
    }

    @Override
    fn byteValue() byte {
        return this.value;
    }

    @Override
    fn toString() *String {
        return intToString(this.value as int).concat("b");
    }
}

/*
Documents for native functions.

#####
mem_segment(ptr: *void) int;

Returns the memory segment of this pointer is pointed to
-1: if invalid
0:  if null
1:  if in stack
2:  if in global memory
3:  if in literal
4:  if in class headers
5:  if in function bodies
6:  if in heap

#####
mem_copy(src: *void, srcIndexInBytes: int, dst: *void, dstIndexInBytes: int, lengthInBytes: int) void;
*/

fn println() void {
    println("");
}

inline fn print(value: int) void {
    _print_int(value);
}

inline fn println(value: int) void {
    _println_int(value);
}

inline fn print(value: float) void {
    _print_float(value);
}

inline fn println(value: float) void {
    _println_float(value);
}

inline fn print(value: char) void {
    _print_char(value);
}

inline fn println(value: char) void {
    _println_char(value);
}

inline fn print(value: byte) void {
    _print_byte(value);
}

inline fn println(value: byte) void {
    _println_byte(value);
}

inline fn print(value: *String) void {
    value.print();
}

inline fn println(value: *String) void {
    value.println();
}

fn print(value: *Object) void {
    print(value.toString());
}

fn println(value: *Object) void {
    println(value.toString());
}

fn print(value: Object[]) void {
    print("Array");
}

fn println(value: Object[]) void {
    println("Array");
}

fn intToString(value: int) *String {
    if value == 0 {
        return "0";
    }
    sign := if value < 0 then -1 else 1;
    absValue := value * sign;
    begin := if sign == 1 then 0 else 1;

    rem := absValue;
    digits := 0;  // digits count in decimal
    mul := 1;
    while rem != 0 {
        rem /= 10;
        mul *= 10;
        digits++;
    }
    mul /= 10;
    array := new char[digits + begin];
    if sign == -1 {
        array[0] = '-';
    }
    rem = absValue;
    for i := begin; i < digits + begin; ++i {
        cur := rem / mul;
        rem -= cur * mul;
        array[i] = (cur + 48) as char;
        mul /= 10;
    }
    return new String(array);
}

fn floatToString(value: float) *String {
    return floatToString(value, 6);
}

fn floatToString(value: float, precision: int) *String {
    if precision < 0 or precision > 15 {
        _exit(1);
    }
    iv: int = value as int;
    dv := value - iv;
    dv = if dv < 0 then -dv else dv;
    front := intToString(iv as int);
    count := 0;
    while count < precision and dv != dv as int {
        dv *= 10;
        count++;
    }
    back := intToString(dv as int);
    return front + "." + back;
}

fn arraycopy(src: int[], srcIndex: int, dst: int[], dstIndex: int, length: int) void {
    unitLength := sizeof(int);
    _mem_copy(src as *void, srcIndex * unitLength, dst as *void, dstIndex * unitLength, length * unitLength);
}

fn arraycopy(src: float[], srcIndex: int, dst: float[], dstIndex: int, length: int) void {
    unitLength := sizeof(float);
    _mem_copy(src as *void, srcIndex * unitLength, dst as *void, dstIndex * unitLength, length * unitLength);
}

fn arraycopy(src: char[], srcIndex: int, dst: char[], dstIndex: int, length: int) void {
    unitLength := sizeof(char);
    _mem_copy(src as *void, srcIndex * unitLength, dst as *void, dstIndex * unitLength, length * unitLength);
}

fn arraycopy(src: byte[], srcIndex: int, dst: byte[], dstIndex: int, length: int) void {
    _mem_copy(src as *void, srcIndex, dst as *void, dstIndex, length);
}

fn arraycopy(src: Object[], srcIndex: int, dst: Object[], dstIndex: int, length: int) void {
    unitLength := sizeof(*void);
    _mem_copy(src as *void, srcIndex * unitLength, dst as *void, dstIndex * unitLength, length * unitLength);
}

fn vmBitsCount() int {
    return sizeof(int) << 3;
}

exportmacro {
    boolean
}

export {
    FALSE, TRUE, NULL,
    Object, String,
    Number, Integer, Float, Char, Byte,
    print, println, arraycopy, vmBitsCount,
    intToString, floatToString
}
