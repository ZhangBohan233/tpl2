const FALSE: int = 0;
const TRUE: int = 1;
const NULL: *void = 0 as *void;

class Object {
    fn __new__(this: *Object) void {
    }

    fn __del__(this: *Object) void {
    }

    fn hash(this: *Object) int {
        return this.__class__;
    }

    fn equals(this: *Object, other: *Object) int {
        return this == other;
    }
}

//abstract class Number {
//    fn __new__(this: *Number) void {
//        super.__new__();
//    }
//
//    abstract fn intValue(this: *Number) int;
//}

//class Integer(Number) {
//  const value: int;
//
//  fn __new__(this: *Integer, value: int) void {
//      super.__new__();
//
  //      this.value = value;
    //}

    //@Override
    //fn intValue(this: *Integer) int {
      //  return this.value;
    //}
//}

export {
    FALSE, TRUE, NULL, Object
}
