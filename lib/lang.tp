macro ONE {
    1
}

macro TWO {
    2
}

const FALSE: int = 0;
const TRUE: int = 1;

fn add(x: int, y: int) int {
    return x + y;
}

fn make() int {
    return add(13, 15)
}

class Object {
    fn __new__(this: *Object) void {

    }

    fn hash(this: *Object) int {
        return this.__class__;
    }

    fn equals(this: *Object, other: *Object) int {
        return this == other;
    }
}

export {
    FALSE, TRUE, make, Object
}

exportmacro {
    ONE, TWO
}
