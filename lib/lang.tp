const FALSE: int = 0;
const TRUE: int = 1;

class Object {
    fn __new__() void {
    }

    fn __del__() void {
    }

    fn hash() int {
        return this.__class__;
    }

    fn equals(other: *Object) int {
        return this == other;
    }
}

fn shit() void {

}

class String {
    const array: char[];

    fn __new__() void {
        super.__new__();
    }

    fn __del__() void {

    }

    fn test(a: *Integer) void {

    }
}

abstract class Number {
    fn __new__() void {
        super.__new__();
    }

    abstract fn intValue() int;
}

class Integer(Number) {
    const value: int;

    fn __new__(value: int) void {
        super.__new__();

        this.value = value;
    }

    @Override
    fn intValue() int {
        return this.value;
    }
}

const NULL: *void = 0 as *void;

export {
    FALSE, TRUE, NULL, Object, Number, Integer
}
