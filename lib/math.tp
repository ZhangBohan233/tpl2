require {
    clock, nat_cos, nat_log
}

const E: float = 2.7182818284590452354;
const PI: float = 3.14159265358979323846;
const DEG_TO_RAD: float = 0.017453292519943295;
const RAD_TO_DEG: float = 57.29577951308232;

var expN: int = 256;
var powN: int = 21;
var cosN: int = 32;

const NaN: float = 0.0 / 0.0;
const LN2: float = 0.6931471805599453094;

// basic

fn abs(x: int) int {
    return if x < 0 then -x else x;
}

fn abs(x: float) float {
    return if x < 0 then -x else x;
}

fn isNaN(x: float) int {
    return x != x;
}

// exp

fn logE(x: float) float {
    return nat_log(x);
}

fn log2(x: float) float {
    return log(2, x);
}

fn log(base: float, x: float) float {
    return logE(x) / logE(base);
}

fn log(base: int, x: float) float {
    return logE(x) / logE(base as float);
}

fn pow(base: int, expo: int) int {
    if expo == 0 {
        return 1;
    }
    posExp := abs(expo);
    res := 1;
    for i := 0; i < posExp; i++ {
        res *= base;
    }
    return if expo > 0 then res else 1 / res;
}

fn pow(base: float, expo: float) float {
    if expo == 0 {
        return 1.0;
    }
    posExp := abs(expo);
    powOf2 := posExp * log2(base);
    // taylor expansion
    res := 1.0;
    x := powOf2;
    expLn := LN2;
    factN := 1;
    for i := 1; i < powN; i++ {
        factN *= i;
        res += expLn * x / factN;
        x *= powOf2;
        expLn *= LN2;
    }
    return if expo > 0 then res else 1.0 / res;
}

// random

randSeed: int = 0;

fn random() float {
    const m := (1 << 15) - 1;
    const a := 3;
    seed := clock() + randSeed;
    for i := 0; i < 100; i++ {
        seed = seed * a % m;
    }
    randSeed = seed;
    return (seed as float) / 32768;
}

fn randInt(low: int, high: int) int {
    range1 := high - low;
    r := random() * range1;
    return (r as int) + low;
}

// trigonometry

fn cos(x: float) float {
    ind := 1;
    xSqr := x * x;
    up := xSqr;
    low := 2;
    bound := cosN * 2;
    res := 1.0;
    // cos x = sum (-1)^n * x^(2n) / (2n)!
    for i := 0; i < bound; i += 2 {
        ind = -ind;
        res += ind * up / low;
        up *= xSqr;
        low *= (i + 3) * (i + 4);
    }
    return res;
}

fn cos(x: int) float {
    return cos(x as float);
}

fn sin(x: float) float {
    return cos(PI / 2 - x);
}

fn sin(x: int) float {
    return sin(x as float);
}

fn tan(x: float) float {
    return sin(x) / cos(x);
}

fn tan(x: int) float {
    return tan(x as float);
}

export {
    E, PI, NaN,
    abs, isNaN,
    random, randInt,
    cos, sin, tan,
}
